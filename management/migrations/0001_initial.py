# Generated by Django 4.2.7 on 2024-02-26 13:31

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import management.validators
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Apartment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('number', models.IntegerField(help_text='Apartment number.', unique=True, verbose_name='Numer mieszkania')),
                ('area', models.DecimalField(decimal_places=2, help_text='Apartment surface area.', max_digits=5, verbose_name='Powierzchnia mieszkania')),
                ('acc_number', models.IntegerField(verbose_name='Nr konta do przelewów')),
            ],
            options={
                'ordering': ('number',),
            },
        ),
        migrations.CreateModel(
            name='AssociationBalance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(verbose_name='Data transakcji')),
                ('title', models.CharField(max_length=200, verbose_name='Tytuł')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Kwota')),
                ('balance', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Bilans')),
                ('type_of_transaction', models.CharField(choices=[('BO', 'Bilans otwarcia'), ('BANK', 'Bank'), ('COMPENSATION', 'Kompensata'), ('HWCH', 'CO/CW'), ('CORRECTION', 'Korekta')], max_length=30, verbose_name='Typ transakcji')),
                ('description', models.CharField(blank=True, max_length=200, null=True, verbose_name='Opis')),
                ('counterparty', models.CharField(max_length=200, verbose_name='Kontrahent')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Fees',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period', models.DateField(verbose_name='Okres')),
                ('maintenance_fee', models.DecimalField(decimal_places=2, help_text='Maintenance fee per m2.', max_digits=5, verbose_name='Opłata eksploatacyjna ')),
                ('repair_fund', models.DecimalField(decimal_places=2, help_text='Repair found per m2.', max_digits=5, verbose_name='Fundusz remontowy')),
                ('central_heating', models.DecimalField(decimal_places=2, help_text='Central heating per m2.', max_digits=5, verbose_name='Centralne ogrzewanie')),
                ('cold_water', models.DecimalField(decimal_places=2, help_text='Cold water per m3.', max_digits=5, verbose_name='Zimna woda')),
                ('hot_water', models.DecimalField(decimal_places=2, help_text='Hot water per m3', max_digits=5, verbose_name='Ciepła woda')),
                ('garbage', models.DecimalField(decimal_places=2, help_text='Garbage fee per tenant', max_digits=5, verbose_name='Śmieci')),
                ('parking_fee', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Opłata parkingowa')),
            ],
        ),
        migrations.CreateModel(
            name='TypesOfTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='WaterReadouts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('readout_date', models.DateField(verbose_name='Data odczytu')),
                ('hot_water_readout', models.IntegerField(verbose_name='Ciepła woda')),
                ('cold_water_readout', models.IntegerField(verbose_name='Zimna woda')),
                ('new_cold_water_meter', models.BooleanField(default=False, verbose_name='Nowy licznik zimnej wody')),
                ('new_hot_water_meter', models.BooleanField(default=False, verbose_name='Nowy licznik ciepłej wody')),
                ('apartment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management.apartment', verbose_name='Mieszkanie')),
            ],
        ),
        migrations.CreateModel(
            name='ParkingCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='Od')),
                ('number_of_cards', models.IntegerField(verbose_name='Ilość kart parkingowych')),
                ('apartment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management.apartment', verbose_name='Mieszkanie')),
            ],
        ),
        migrations.CreateModel(
            name='Occupancy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='Od')),
                ('occupants', models.IntegerField(verbose_name='Ilość mieszkańców')),
                ('apartment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management.apartment', verbose_name='Mieszkanie')),
            ],
        ),
        migrations.CreateModel(
            name='CentralHeatingSurcharge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='Od')),
                ('end_date', models.DateField(verbose_name='Do')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Kwota')),
                ('amount_per_month', models.DecimalField(decimal_places=2, max_digits=10, null=True, verbose_name='Kwota miesięczna')),
                ('apartment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management.apartment', verbose_name='Mieszkanie')),
            ],
        ),
        migrations.CreateModel(
            name='BigFamilyCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='Od')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Kwota')),
                ('apartment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management.apartment', verbose_name='Mieszkanie')),
            ],
        ),
        migrations.CreateModel(
            name='ApartmentBalance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(verbose_name='Data transakcji')),
                ('title', models.CharField(max_length=200, verbose_name='Tytuł')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Kwota')),
                ('balance', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Bilans')),
                ('type_of_transaction', models.CharField(choices=[('BO', 'Bilans otwarcia'), ('BANK', 'Bank'), ('COMPENSATION', 'Kompensata'), ('HWCH', 'CO/CW'), ('CORRECTION', 'Korekta')], max_length=30, verbose_name='Typ transakcji')),
                ('apartment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management.apartment', verbose_name='Mieszkanie')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ApartmentUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone', models.IntegerField(null=True, validators=[management.validators.phone_number_validator], verbose_name='Numer telefonu')),
                ('apartment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='management.apartment', verbose_name='Mieszkanie')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
